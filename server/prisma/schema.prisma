generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model friends {
  id                             Int           @id @default(autoincrement())
  user_id                        Int
  friend_id                      Int
  status                         friend_status
  created_at                     DateTime      @db.Timestamp(6)
  users_friends_friend_idTousers users         @relation("friends_friend_idTousers", fields: [friend_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_friends_user_idTousers   users         @relation("friends_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                               Int                   @id @default(autoincrement())
  name                             String                @db.VarChar(255)
  lastname                         String                @db.VarChar(255)
  surname                          String                @db.VarChar(255)
  role                             roles
  email                            String                @unique @db.VarChar(255)
  end_semester                     Int
  now_semester                     Int
  department                       String                @db.VarChar(255)
  password                         String                @db.VarChar(255)
  img_hash_name                    String                @db.VarChar(255)
  created_at                       DateTime              @db.Timestamp(6)
  devices                          devices[]
  friends_friends_friend_idTousers friends[]             @relation("friends_friend_idTousers")
  friends_friends_user_idTousers   friends[]             @relation("friends_user_idTousers")
  messages                         messages[]
  refresh_token                    refresh_token[]
  users_conversations              users_conversations[]
}

model refresh_token {
  id            Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String   @db.VarChar(255)
  created_at    DateTime @db.Timestamp(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model conversations {
  id                  Int                   @id @default(autoincrement())
  type                chat_type
  messages            messages[]
  users_conversations users_conversations[]
}

model devices {
  id                   Int         @id @default(autoincrement())
  user_id              Int
  device_type          device_type
  registration_date    DateTime    @db.Timestamp(6)
  last_seen_message_id Int
  users                users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model messages {
  id              Int           @id @default(autoincrement())
  user_id         Int
  conversation_id Int
  content         String        @db.VarChar
  sent_at         DateTime      @db.Timestamp(6)
  delivered_at    DateTime      @db.Timestamp(6)
  seen_at         DateTime      @db.Timestamp(6)
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users_conversations {
  id              Int           @id @default(autoincrement())
  user_id         Int
  conversation_id Int
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum roles {
  student
  teacher
}

enum friend_status {
  pending
  accepted
  rejected
}

enum chat_type {
  private
  group
}

enum device_type {
  phone
  laptop
  tablet
}
