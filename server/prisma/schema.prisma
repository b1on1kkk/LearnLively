generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model friends {
  id                             Int           @id @default(autoincrement())
  user_id                        Int
  friend_id                      Int
  status                         friend_status
  created_at                     DateTime      @db.Timestamp(6)
  users_friends_friend_idTousers users         @relation("friends_friend_idTousers", fields: [friend_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_friends_user_idTousers   users         @relation("friends_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                               Int                   @id @default(autoincrement())
  name                             String                @db.VarChar(255)
  lastname                         String                @db.VarChar(255)
  surname                          String                @db.VarChar(255)
  role                             roles
  email                            String                @unique @db.VarChar(255)
  end_semester                     Int
  now_semester                     Int
  department                       String                @db.VarChar(255)
  password                         String                @db.VarChar(255)
  img_hash_name                    String                @db.VarChar(255)
  created_at                       DateTime              @db.Timestamp(6)
  friends_friends_friend_idTousers friends[]             @relation("friends_friend_idTousers")
  friends_friends_user_idTousers   friends[]             @relation("friends_user_idTousers")
  group_users                      group_users[]
  groups                           groups[]
  messages                         messages[]
  refresh_token                    refresh_token[]
  seen_messages                    seen_messages[]
  users_conversations              users_conversations[]
}

model refresh_token {
  id            Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String   @db.VarChar(255)
  created_at    DateTime @db.Timestamp(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model conversations {
  id                  Int                   @id @default(autoincrement())
  type                chat_type
  group_uuid          String                @db.VarChar(255)
  conversation_hash   String                @db.VarChar(255)
  groups              groups[]
  messages            messages[]
  users_conversations users_conversations[]
}

model messages {
  id              Int             @id @default(autoincrement())
  user_id         Int
  conversation_id Int
  content         String          @db.VarChar(255)
  sent_at         String          @db.VarChar(255)
  delivered_at    String          @db.VarChar(255)
  edited          Boolean
  replies_to      Int?
  seen            Boolean
  conversations   conversations   @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages        messages?       @relation("messagesTomessages", fields: [replies_to], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_messages  messages[]      @relation("messagesTomessages")
  users           users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seen_messages   seen_messages[]
}

model users_conversations {
  id              Int           @id @default(autoincrement())
  user_id         Int
  conversation_id Int
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model seen_messages {
  id         Int      @id @default(autoincrement())
  message_id Int
  user_id    Int
  seen_at    String   @db.VarChar(255)
  messages   messages @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model group_users {
  id       Int     @id @default(autoincrement())
  group_id Int?
  user_id  Int?
  groups   groups? @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model groups {
  id              Int            @id @default(autoincrement())
  conversation_id Int?
  owner_id        Int?
  group_name      String         @db.VarChar(255)
  description     String         @db.VarChar(255)
  group_users     group_users[]
  conversations   conversations? @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users?         @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum roles {
  student
  teacher
}

enum friend_status {
  pending
  accepted
  rejected
}

enum chat_type {
  private
  group
}

enum device_type {
  phone
  laptop
  tablet
}
